generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  firebaseUid String @unique // Firebase UID to link Firebase Auth to this user
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String @unique

  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")

  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  seshes              Sesh[] @relation("SeshOwner")
  seshesAsParticipant Sesh[] @relation("SeshParticipants")
  uploadedFiles       File[] @relation("FileUploader")
}

model Sesh {
  id           Int      @id @default(autoincrement())
  title        String
  start        DateTime
  end          DateTime
  location     String?
  virtual      Boolean
  ownerId      Int
  owner        User     @relation("SeshOwner", fields: [ownerId], references: [id])
  participants User[]   @relation("SeshParticipants")
  files        File[]   @relation("SeshFiles")
}

model FriendRequest {
  id          Int  @id @default(autoincrement())
  sender      User @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId    Int
  recipient   User @relation("ReceivedFriendRequests", fields: [recipientId], references: [id])
  recipientId Int
}

model File {
  id         Int      @id @default(autoincrement())
  filename   String   // Original file name
  s3Key      String
  fileType   String   // MIME type
  fileSize   Int      // In bytes
  uploadedAt DateTime @default(now())

  seshId       Int
  sesh         Sesh @relation("SeshFiles", fields: [seshId], references: [id], onDelete: Cascade)
  uploadedBy   User @relation("FileUploader", fields: [uploadedById], references: [id])
  uploadedById Int

  @@index([seshId])
  @@index([uploadedById])
}
